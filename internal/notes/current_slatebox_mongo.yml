apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: slatebox-mongo
  namespace: default
  uid: 80278436-c7b5-4dd7-bde0-10f9b8cfdc30
  resourceVersion: '904705'
  generation: 1
  creationTimestamp: '2022-02-04T16:59:39Z'
  labels:
    app: slatebox-mongo-svc
  ownerReferences:
    - apiVersion: mongodbcommunity.mongodb.com/v1
      kind: MongoDBCommunity
      name: slatebox-mongo
      uid: 569b9662-662d-4288-90dc-111c98c8d8b7
      controller: true
      blockOwnerDeletion: true
  managedFields:
    - manager: manager
      operation: Update
      apiVersion: apps/v1
      time: '2022-02-04T16:59:39Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"569b9662-662d-4288-90dc-111c98c8d8b7"}: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"mongod"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_STATUS_FILEPATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/healthstatus"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/hooks"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/mongodb-mms-automation/authentication"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/log/mongodb-mms-automation"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"mongodb-agent"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"AGENT_STATUS_FILEPATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"AUTOMATION_CONFIG_MAP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"HEADLESS_AGENT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/automation/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/mongodb-mms-automation/authentication"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/log/mongodb-mms-automation"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/log/mongodb-mms-automation/healthstatus"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"change-dir-permissions"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:runAsGroup: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"mongod-posthook"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/hooks"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"mongodb-agent-readinessprobe"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"agent-scripts"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"automation-config"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"healthstatus"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"hooks"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"slatebox-mongo-keyfile"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
          f:volumeClaimTemplates: {}
    - manager: kube-controller-manager
      operation: Update
      apiVersion: apps/v1
      time: '2022-02-04T19:24:46Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:availableReplicas: {}
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      subresource: status
  selfLink: /apis/apps/v1/namespaces/default/statefulsets/slatebox-mongo
status:
  observedGeneration: 1
  replicas: 3
  readyReplicas: 3
  currentReplicas: 3
  updatedReplicas: 3
  currentRevision: slatebox-mongo-5fddc9f895
  updateRevision: slatebox-mongo-5fddc9f895
  collisionCount: 0
  availableReplicas: 3
spec:
  replicas: 3
  selector:
    matchLabels:
      app: slatebox-mongo-svc
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: slatebox-mongo-svc
    spec:
      volumes:
        - name: agent-scripts
          emptyDir: {}
        - name: automation-config
          secret:
            secretName: slatebox-mongo-config
            defaultMode: 416
        - name: healthstatus
          emptyDir: {}
        - name: hooks
          emptyDir: {}
        - name: slatebox-mongo-keyfile
          emptyDir: {}
      initContainers:
        - name: change-dir-permissions
          image: busybox
          command:
            - chown
            - '-R'
            - '2000'
            - /data
          resources: {}
          volumeMounts:
            - name: data-volume
              mountPath: /data
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false
        - name: mongod-posthook
          image: >-
            quay.io/mongodb/mongodb-kubernetes-operator-version-upgrade-post-start-hook:1.0.3
          command:
            - cp
            - version-upgrade-hook
            - /hooks/version-upgrade
          resources: {}
          volumeMounts:
            - name: hooks
              mountPath: /hooks
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
        - name: mongodb-agent-readinessprobe
          image: quay.io/mongodb/mongodb-kubernetes-readinessprobe:1.0.6
          command:
            - cp
            - /probes/readinessprobe
            - /opt/scripts/readinessprobe
          resources: {}
          volumeMounts:
            - name: agent-scripts
              mountPath: /opt/scripts
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      containers:
        - name: mongod
          image: docker.io/mongo:5.0.6
          command:
            - /bin/sh
            - '-c'
            - >+

              #run post-start hook to handle version changes

              /hooks/version-upgrade


              # wait for config and keyfile to be created by the agent
               while ! [ -f /data/automation-mongod.conf -a -f /var/lib/mongodb-mms-automation/authentication/keyfile ]; do sleep 3 ; done ; sleep 2 ;

              # with mongod configured to append logs, we need to provide them
              to stdout as

              # mongod does not write to stdout and a log file

              tail -F /var/log/mongodb-mms-automation/mongodb.log > /dev/stdout
              &


              # start mongod with this configuration

              exec mongod -f /data/automation-mongod.conf;

          env:
            - name: AGENT_STATUS_FILEPATH
              value: /healthstatus/agent-health-status.json
          resources:
            limits:
              cpu: '1'
              memory: 500M
            requests:
              cpu: 500m
              memory: 400M
          volumeMounts:
            - name: data-volume
              mountPath: /data
            - name: healthstatus
              mountPath: /healthstatus
            - name: hooks
              mountPath: /hooks
            - name: logs-volume
              mountPath: /var/log/mongodb-mms-automation
            - name: slatebox-mongo-keyfile
              mountPath: /var/lib/mongodb-mms-automation/authentication
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 2000
            runAsNonRoot: true
        - name: mongodb-agent
          image: quay.io/mongodb/mongodb-agent:11.0.5.6963-1
          command:
            - /bin/bash
            - '-c'
            - >-
              current_uid=$(id -u)

              AGENT_API_KEY="$(cat
              /mongodb-automation/agent-api-key/agentApiKey)"

              declare -r current_uid

              if ! grep -q "${current_uid}" /etc/passwd ; then

              sed -e "s/^mongodb:/builder:/" /etc/passwd > /tmp/passwd

              echo "mongodb:x:$(id -u):$(id -g):,,,:/:/bin/bash" >> /tmp/passwd

              export NSS_WRAPPER_PASSWD=/tmp/passwd

              export LD_PRELOAD=libnss_wrapper.so

              export NSS_WRAPPER_GROUP=/etc/group

              fi

              agent/mongodb-agent
              -cluster=/var/lib/automation/config/cluster-config.json
              -healthCheckFilePath=/var/log/mongodb-mms-automation/healthstatus/agent-health-status.json
              -serveStatusPort=5000 -skipMongoStart -noDaemonize
              -useLocalMongoDbTools
          env:
            - name: AGENT_STATUS_FILEPATH
              value: >-
                /var/log/mongodb-mms-automation/healthstatus/agent-health-status.json
            - name: AUTOMATION_CONFIG_MAP
              value: slatebox-mongo-config
            - name: HEADLESS_AGENT
              value: 'true'
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          resources:
            limits:
              cpu: '1'
              memory: 500M
            requests:
              cpu: 500m
              memory: 400M
          volumeMounts:
            - name: agent-scripts
              mountPath: /opt/scripts
            - name: automation-config
              readOnly: true
              mountPath: /var/lib/automation/config
            - name: data-volume
              mountPath: /data
            - name: healthstatus
              mountPath: /var/log/mongodb-mms-automation/healthstatus
            - name: logs-volume
              mountPath: /var/log/mongodb-mms-automation
            - name: slatebox-mongo-keyfile
              mountPath: /var/lib/mongodb-mms-automation/authentication
          readinessProbe:
            exec:
              command:
                - /opt/scripts/readinessprobe
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 40
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            runAsUser: 2000
            runAsNonRoot: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: mongodb-database
      serviceAccount: mongodb-database
      securityContext:
        fsGroup: 2000
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data-volume
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        selector:
          matchLabels:
            type: data
        resources:
          requests:
            storage: 60G
        storageClassName: default
        volumeMode: Filesystem
      status:
        phase: Pending
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: logs-volume
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        selector:
          matchLabels:
            type: logs
        resources:
          requests:
            storage: 8G
        storageClassName: default
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: slatebox-mongo-svc
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
